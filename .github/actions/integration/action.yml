name: "Integration Tests"
description: "Playwright integration tests"
inputs:
  AWS_ACCESS_KEY_ID:
    required: true
    description: "The AWS access key ID"
  AWS_SECRET_ACCESS_KEY:
    required: true
    description: "The AWS secret access key"
  APP_IMAGE_TAG:
    required: true
    description: "The tag of the app image to test against"
  WORKER_IMAGE_TAG:
    required: true
    description: "The tag of the worker image to test against"
  WORKFLOW_IMAGE_TAG:
    required: true
    description: "The tag of the workflow image to test against"
runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 20

    # - name: Install openssl v1
    #   shell: bash
    #   run: |
    #     wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.23_amd64.deb
    #     sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.23_amd64.deb

    - name: Install dependencies
      env:
        POSTGRES_PRISMA_URL: "postgresql://dbmaster:dbpassword@127.0.0.1:5432/application"
        PRISMA_CLI_BINARY_TARGETS: "debian-openssl-3.0.x"
      shell: bash
      run: |
        npm install -g yarn
        yarn
        yarn workspace @jptr/braille-prisma run build
        yarn workspace @jptr/braille-prisma run db:generate

    - name: Get installed Playwright version
      shell: bash
      id: playwright-version
      run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_ENV

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

    - name: Install Playwright Browsers
      shell: bash
      run: yarn playwright install --with-deps
      if: steps.playwright-cache.outputs.cache-hit != 'true'

    - uses: supplypike/setup-bin@v3
      name: Install mkcert
      with:
        uri: "https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64"
        name: "mkcert"
        version: "1.4.3"

    - uses: supplypike/setup-bin@v3
      name: Upgrade Docker Compose
      with:
        uri: "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64"
        name: "docker-compose"
        version: "2.24.6"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1

    - name: Login to Amazon ECR
      id: ecr_auth
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: "true"

    - name: Install Certs
      shell: bash
      run: |
        mkdir -p volumes/certs
        mkcert --version
        mkcert -install
        yarn certs

    - name: Install SSL
      shell: bash
      run: |
        openssl version
        # sudo apt update
        # sudo apt install -y libssl1.1

    - name: Setup Environment
      shell: bash
      run: |
        echo 'BRAILLE_FRONTEND_IMAGE="${{ inputs.APP_IMAGE_TAG }}"' >> .env
        echo 'worker_image="${{ inputs.WORKER_IMAGE_TAG }}"' >> .env
        echo 'workflow_image="${{ inputs.WORKFLOW_IMAGE_TAG }}"' >> .env
        docker-compose -v
        docker-compose -f "docker-compose.e2e.yml" up -d

    - name: Migrate Database
      env:
        POSTGRES_PRISMA_URL: "postgresql://dbmaster:dbpassword@127.0.0.1:5432/application"
      shell: bash
      run: |
        yarn db:deploy

    - name: Run Playwright tests
      env:
        POSTGRES_PRISMA_URL: "postgresql://dbmaster:dbpassword@127.0.0.1:5432/application"
        PRISMA_CLI_BINARY_TARGETS: "debian-openssl-3.0.x"
      shell: bash
      run: yarn test:e2e

    - name: Stop containers
      if: always()
      shell: bash
      run: |
        mkdir -p docker-logs
        echo "Listing all containers:"
        docker-compose -f docker-compose.e2e.yml ps

        echo -e "\nGetting frontend container ID:"
        frontend_container=$(docker-compose -f docker-compose.e2e.yml ps -q frontend)
        echo "Frontend container: $frontend_container"

        echo -e "\nGetting db container ID:"
        db_container=$(docker-compose -f docker-compose.e2e.yml ps -q db)
        echo "DB container: $db_container"

        if [ ! -z "$frontend_container" ]; then
          echo "Collecting frontend logs..."
          docker logs $frontend_container > docker-logs/frontend.log || true
        else
          echo "No frontend container found"
        fi

        if [ ! -z "$db_container" ]; then
          echo "Collecting db logs..."
          docker logs $db_container > docker-logs/db.log || true
        else
          echo "No db container found"
        fi

        echo -e "\nStopping containers..."
        docker-compose -f "docker-compose.e2e.yml" down

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-logs
        path: docker-logs/
        retention-days: 30

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
