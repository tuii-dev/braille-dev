name: Braille-DEV - Destroy
on:
  workflow_dispatch:
    inputs:
      workspace:
        description: "Terraform workspace to destroy"
        required: true
        default: "dev"

jobs:
  destroy_app:
    name: Destroy Application Infrastructure
    runs-on: ubuntu-24.04
    environment:
      name: Production

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infrastructure/app

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace select ${{ github.event.inputs.workspace }}
        working-directory: infrastructure/app

      - name: Terraform Destroy
        id: destroy
        working-directory: infrastructure/app
        run: |
          # Create terraform.auto.tfvars with dummy values since they're required but not used for destroy
          echo 'application_image="dummy"' >> terraform.auto.tfvars
          echo 'worker_image="dummy"' >> terraform.auto.tfvars
          terraform destroy -auto-approve

  destroy_services:
    name: Destroy Services Infrastructure
    runs-on: ubuntu-24.04
    needs: destroy_app
    environment:
      name: Production

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infrastructure/services

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace select ${{ github.event.inputs.workspace }}
        working-directory: infrastructure/services

      - name: Disable RDS Deletion Protection
        run: |
          # Get the RDS instance ID
          INSTANCE_ID="braille-services-${{ github.event.inputs.workspace }}-service"
          
          # Check if the RDS instance exists
          if aws rds describe-db-instances --db-instance-identifier "$INSTANCE_ID" 2>/dev/null; then
            echo "Found RDS instance $INSTANCE_ID, disabling deletion protection..."
            
            # Disable deletion protection
            aws rds modify-db-instance \
              --db-instance-identifier "$INSTANCE_ID" \
              --no-deletion-protection \
              --apply-immediately
            
            # Wait for the modification to complete
            aws rds wait db-instance-available \
              --db-instance-identifier "$INSTANCE_ID"
          else
            echo "RDS instance $INSTANCE_ID not found, skipping deletion protection disable"
          fi
        working-directory: infrastructure/services

      - name: Terraform Destroy
        id: destroy
        working-directory: infrastructure/services
        run: |
          # Create terraform.auto.tfvars with required values
          echo 'SIGNING_PRIVATE_KEY="dummy"' >> terraform.auto.tfvars
          echo 'SIGNING_PUBLIC_KEY="dummy"' >> terraform.auto.tfvars
          echo 'AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"' >> terraform.auto.tfvars
          echo 'AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"' >> terraform.auto.tfvars
          echo 'AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"' >> terraform.auto.tfvars
          echo 'LOCALSTACK=false' >> terraform.auto.tfvars
          terraform destroy -auto-approve

  destroy_shared:
    name: Destroy Shared Infrastructure
    runs-on: ubuntu-24.04
    needs: destroy_services
    environment:
      name: Production

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infrastructure/shared

      - name: Delete ECR Images
        run: |
          # Get the ECR repository name
          REPO_NAME="braille-shared-resources_ecr"
          
          # List and delete all images
          if aws ecr describe-repositories --repository-names "$REPO_NAME" 2>/dev/null; then
            echo "Found ECR repository $REPO_NAME, deleting all images..."
            
            # Get all image IDs (both tagged and untagged)
            IMAGE_IDS=$(aws ecr list-images \
              --repository-name "$REPO_NAME" \
              --query 'imageIds[*]' \
              --output json)
            
            if [ "$IMAGE_IDS" != "[]" ]; then
              echo "Deleting images from repository..."
              aws ecr batch-delete-image \
                --repository-name "$REPO_NAME" \
                --image-ids "$IMAGE_IDS"
            else
              echo "No images found in repository"
            fi
          else
            echo "ECR repository $REPO_NAME not found, skipping image deletion"
          fi
        working-directory: infrastructure/shared

      - name: Terraform Destroy
        id: destroy
        working-directory: infrastructure/shared
        run: |
          # Create terraform.auto.tfvars with required values
          echo 'AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"' >> terraform.auto.tfvars
          echo 'AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"' >> terraform.auto.tfvars
          echo 'AWS_REGION="${{ secrets.AWS_REGION }}"' >> terraform.auto.tfvars
          terraform destroy -auto-approve
