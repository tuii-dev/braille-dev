name: Braille-DEV
on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  shared:
    name: Shared Infrastructure
    runs-on: ubuntu-24.04
    outputs:
      ecr_url: ${{ steps.apply.outputs.ecr_url }}
      ci_user_access_key_id: ${{ steps.apply.outputs.ci_user_access_key_id }}
      ci_user_access_secret_key: ${{ steps.apply.outputs.ci_user_access_secret_key }}

    environment:
      name: Production

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: infrastructure/shared

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infrastructure/shared

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infrastructure/shared

      - name: Terraform Apply
        id: apply
        working-directory: infrastructure/shared
        run: |
          terraform apply -auto-approve
          echo "ecr_url=$(terraform output -raw ECR_REPOSITORY_URL)" >> $GITHUB_OUTPUT
          echo "ci_user_access_key_id=$(terraform output -raw CI_USER_ACCESS_KEY_ID)" >> $GITHUB_OUTPUT
          echo "ci_user_access_secret_key=$(terraform output -raw CI_USER_ACCESS_KEY_SECRET)" >> $GITHUB_OUTPUT

  # buildapp:
  #   name: Build Application
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: buildapp
  #       uses: ./.github/actions/buildapp
  #       with:
  #         IMAGE_TAG: ${{ needs.shared.outputs.ecr_url }}:application_${{ github.sha }}
  #         AWS_ACCESS_KEY_ID: ${{ needs.shared.outputs.ci_user_access_key_id }}
  #         AWS_SECRET_ACCESS_KEY: ${{ needs.shared.outputs.ci_user_access_secret_key }}

  # worker:
  #   name: Build Worker Container
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ needs.shared.outputs.ci_user_access_key_id }}
  #         aws-secret-access-key: ${{ needs.shared.outputs.ci_user_access_secret_key }}
  #         aws-region: ap-southeast-2

  #     - name: Login to Amazon ECR
  #       id: ecr_auth
  #       uses: aws-actions/amazon-ecr-login@v1
  #       with:
  #         mask-password: "true"

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #       with:
  #         platforms: linux/amd64

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         platforms: linux/amd64
  #         context: .
  #         file: ./packages/worker/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ needs.shared.outputs.ecr_url }}:worker_${{ github.sha }}

  #############################################
  # stg_services:
  #   name: Staging — Application Services
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #   outputs:
  #     DATABASE_URL: ${{ steps.deployinfra.outputs.DATABASE_URL }}
  #   environment:
  #     name: Staging
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: deployinfra
  #       uses: ./.github/actions/services
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #############################################

  # integration:
  #   name: Playwright Integration Tests
  #   timeout-minutes: 60
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #     - buildapp
  #     - worker

  #   steps:
  #     - uses: actions/checkout@v3
  #     - id: integration
  #       uses: ./.github/actions/integration
  #       with:
  #         AWS_ACCESS_KEY_ID: ${{ needs.shared.outputs.ci_user_access_key_id }}
  #         AWS_SECRET_ACCESS_KEY: ${{ needs.shared.outputs.ci_user_access_secret_key }}
  #         APP_IMAGE_TAG: ${{ needs.shared.outputs.ecr_url }}:application_${{ github.sha }}
  #         WORKER_IMAGE_TAG: ${{ needs.shared.outputs.ecr_url }}:worker_${{ github.sha }}

  #############################################
  # dbmigrate:
  #   name: Staging — Database Migration
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - stg_services
  #   environment:
  #     name: Staging
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/dbmigrate
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #         BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PRIVATE_KEY }}

  # stg_application:
  #   name: Staging — Deploy Application
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - buildapp
  #     - shared
  #     - stg_services
  #     - dbmigrate
  #     - worker

  #   environment:
  #     name: Staging

  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/application
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #         ECR_URL: ${{ needs.shared.outputs.ecr_url }}
  #         IMAGE_SHA: ${{ github.sha }}
  #############################################

  # prod_services:
  #   name: Prod — Application Services
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #     # - stg_application
  #     - integration
  #   outputs:
  #     DATABASE_URL: ${{ steps.migrate.outputs.DATABASE_URL }}
  #   environment:
  #     name: Production
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/services
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}

  # prod_dbmigrate:
  #   name: Prod — Database Migration
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - prod_services
  #   environment:
  #     name: Production
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/dbmigrate
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #         BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PRIVATE_KEY }}

  # prod_application:
  #   name: Prod — Deploy Application
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #     - integration
  #     - prod_services
  #     - prod_dbmigrate

  #   environment:
  #     name: Production

  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/application
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #         ECR_URL: ${{ needs.shared.outputs.ecr_url }}
  #         IMAGE_SHA: ${{ github.sha }}
