name: Braille-DEV
on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  shared:
    name: Shared Infrastructure
    runs-on: ubuntu-24.04

    environment:
      name: Production

    steps:
      - uses: actions/checkout@v4

      # Step 2: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: infrastructure/shared

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infrastructure/shared

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infrastructure/shared

      - name: Terraform Apply
        id: apply
        working-directory: infrastructure/shared
        run: |
          # Run terraform apply and capture output
          terraform apply -auto-approve

          # Explicitly get each output and verify
          echo "Getting Terraform outputs..."

          # Get all outputs first
          echo "Getting Terraform outputs..."
          ALL_OUTPUTS=$(terraform output -json)

          # Extract and verify ECR URL
          ECR_URL=$(echo "$ALL_OUTPUTS" | jq -r '.ECR_REPOSITORY_URL.value')
          if [ "$ECR_URL" = "null" ] || [ -z "$ECR_URL" ]; then
            echo "Error: ECR_REPOSITORY_URL output is missing or null"
            echo "All outputs:"
            echo "$ALL_OUTPUTS" | jq
            exit 1
          fi

          # Get AWS credentials
          CI_KEY_ID=$(echo "$ALL_OUTPUTS" | jq -r '.CI_USER_ACCESS_KEY_ID.value')
          CI_KEY_SECRET=$(echo "$ALL_OUTPUTS" | jq -r '.CI_USER_ACCESS_KEY_SECRET.value')

          # Save outputs to a file
          OUTPUTS_DIR="$GITHUB_WORKSPACE/tf-outputs"
          mkdir -p "$OUTPUTS_DIR"

          echo "Saving outputs to: $OUTPUTS_DIR"
          echo "$ECR_URL" > "$OUTPUTS_DIR/ecr_url"
          echo "$CI_KEY_ID" > "$OUTPUTS_DIR/ci_key_id"
          echo "$CI_KEY_SECRET" > "$OUTPUTS_DIR/ci_key_secret"

          echo "=== Verifying files were created ==="
          ls -la "$OUTPUTS_DIR"
          echo "=== File contents ==="
          cat "$OUTPUTS_DIR/ecr_url" | sed 's/./*/g'  # Mask the contents
          echo "=== End verification ==="

      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v4
        with:
          name: tf-outputs
          path: ${{ github.workspace }}/tf-outputs
          retention-days: 1

  buildapp:
    name: Build Application
    runs-on: ubuntu-24.04
    needs:
      - shared
    steps:
      - uses: actions/checkout@v4

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: tf-outputs
          path: ./tf-outputs

      - name: Load outputs into environment
        run: |
          mkdir -p ./tf-outputs
          ECR_URL=$(cat ./tf-outputs/ecr_url)
          CI_KEY_ID=$(cat ./tf-outputs/ci_key_id)
          CI_KEY_SECRET=$(cat ./tf-outputs/ci_key_secret)

          echo "=== Checking outputs ==="
          echo "ECR URL is present: $([ ! -z "$ECR_URL" ] && echo 'true' || echo 'false')"
          echo "Full Image Tag will be: ${ECR_URL}:application_${{ github.sha }}"
          echo "AWS credentials are present: $([ ! -z "$CI_KEY_ID" ] && [ ! -z "$CI_KEY_SECRET" ] && echo 'true' || echo 'false')"
          echo "==========================="

          # Export for subsequent steps
          echo "ECR_URL=$ECR_URL" >> "$GITHUB_ENV"
          echo "CI_KEY_ID=$CI_KEY_ID" >> "$GITHUB_ENV"
          echo "CI_KEY_SECRET=$CI_KEY_SECRET" >> "$GITHUB_ENV"

      - id: buildapp
        uses: ./.github/actions/buildapp
        with:
          IMAGE_TAG: ${{ env.ECR_URL }}:application_${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ env.CI_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.CI_KEY_SECRET }}

  worker:
    name: Build Worker Container
    runs-on: ubuntu-24.04
    needs:
      - shared
    steps:
      - uses: actions/checkout@v4

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: tf-outputs
          path: ./tf-outputs

      - name: Load outputs into environment
        run: |
          mkdir -p ./tf-outputs
          ECR_URL=$(cat ./tf-outputs/ecr_url)
          CI_KEY_ID=$(cat ./tf-outputs/ci_key_id)
          CI_KEY_SECRET=$(cat ./tf-outputs/ci_key_secret)
            
            echo "=== Checking outputs ==="
            echo "ECR URL is present: $([ ! -z "$ECR_URL" ] && echo 'true' || echo 'false')"
            echo "Full Image Tag will be: ${ECR_URL}:application_${{ github.sha }}"
            echo "AWS credentials are present: $([ ! -z "$CI_KEY_ID" ] && [ ! -z "$CI_KEY_SECRET" ] && echo 'true' || echo 'false')"
            echo "==========================="
            
            # Export for subsequent steps
            echo "ECR_URL=$ECR_URL" >> "$GITHUB_ENV"
            echo "CI_KEY_ID=$CI_KEY_ID" >> "$GITHUB_ENV"
            echo "CI_KEY_SECRET=$CI_KEY_SECRET" >> "$GITHUB_ENV"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.CI_KEY_ID }}
          aws-secret-access-key: ${{ env.CI_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr_auth
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          context: .
          file: ./packages/worker/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_URL }}:worker_${{ github.sha }}

  workflow:
    name: Build Workflow Container
    runs-on: ubuntu-24.04
    needs:
      - shared
    steps:
      - uses: actions/checkout@v4

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: tf-outputs
          path: ./tf-outputs

      - name: Load outputs into environment
        run: |
          mkdir -p ./tf-outputs
          ECR_URL=$(cat ./tf-outputs/ecr_url)
          CI_KEY_ID=$(cat ./tf-outputs/ci_key_id)
          CI_KEY_SECRET=$(cat ./tf-outputs/ci_key_secret)

            echo "=== Checking outputs ==="
            echo "ECR URL is present: $([ ! -z "$ECR_URL" ] && echo 'true' || echo 'false')"
            echo "Full Image Tag will be: ${ECR_URL}:application_${{ github.sha }}"
            echo "AWS credentials are present: $([ ! -z "$CI_KEY_ID" ] && [ ! -z "$CI_KEY_SECRET" ] && echo 'true' || echo 'false')"
            echo "==========================="

            # Export for subsequent steps
            echo "ECR_URL=$ECR_URL" >> "$GITHUB_ENV"
            echo "CI_KEY_ID=$CI_KEY_ID" >> "$GITHUB_ENV"
            echo "CI_KEY_SECRET=$CI_KEY_SECRET" >> "$GITHUB_ENV"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.CI_KEY_ID }}
          aws-secret-access-key: ${{ env.CI_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr_auth
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          context: .
          file: ./packages/workflow/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_URL }}:workflow_${{ github.sha }}

  #############################################
  # stg_services:
  #   name: Staging — Application Services
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #   outputs:
  #     DATABASE_URL: ${{ steps.deployinfra.outputs.DATABASE_URL }}
  #   environment:
  #     name: Staging
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: deployinfra
  #       uses: ./.github/actions/services
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #############################################

  # integration:
  #   name: Playwright Integration Tests
  #   timeout-minutes: 60
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #     - buildapp
  #     - worker

  #   steps:
  #     - uses: actions/checkout@v3
  #     - id: integration
  #       uses: ./.github/actions/integration
  #       with:
  #         AWS_ACCESS_KEY_ID: ${{ needs.shared.outputs.ci_user_access_key_id }}
  #         AWS_SECRET_ACCESS_KEY: ${{ needs.shared.outputs.ci_user_access_secret_key }}
  #         APP_IMAGE_TAG: ${{ needs.shared.outputs.ecr_url }}:application_${{ github.sha }}
  #         WORKER_IMAGE_TAG: ${{ needs.shared.outputs.ecr_url }}:worker_${{ github.sha }}

  #############################################
  # dbmigrate:
  #   name: Staging — Database Migration
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - stg_services
  #   environment:
  #     name: Staging
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/dbmigrate
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #         BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PRIVATE_KEY }}

  # stg_application:
  #   name: Staging — Deploy Application
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - buildapp
  #     - shared
  #     - stg_services
  #     - dbmigrate
  #     - worker

  #   environment:
  #     name: Staging

  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/application
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #         ECR_URL: ${{ needs.shared.outputs.ecr_url }}
  #         IMAGE_SHA: ${{ github.sha }}
  #############################################

  # prod_services:
  #   name: Prod — Application Services
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #     # - stg_application
  #     - integration
  #   outputs:
  #     DATABASE_URL: ${{ steps.migrate.outputs.DATABASE_URL }}
  #   environment:
  #     name: Production
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/services
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}

  # prod_dbmigrate:
  #   name: Prod — Database Migration
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - prod_services
  #   environment:
  #     name: Production
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/dbmigrate
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #         BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PRIVATE_KEY }}

  # prod_application:
  #   name: Prod — Deploy Application
  #   runs-on: ubuntu-24.04
  #   needs:
  #     - shared
  #     - integration
  #     - prod_services
  #     - prod_dbmigrate

  #   environment:
  #     name: Production

  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: migrate
  #       uses: ./.github/actions/application
  #       with:
  #         TF_TOKEN: ${{ secrets.TF_TOKEN }}
  #         WORKSPACE: ${{ secrets.WORKSPACE }}
  #         ECR_URL: ${{ needs.shared.outputs.ecr_url }}
  #         IMAGE_SHA: ${{ github.sha }}
